#   }
return(PV)
}
####pv#####
pv_reason <- function(rate, g = 0, nper, pmt, t = 1) {
r <- (1 + rate)/(1 + g) - 1
PV <- pmt/r * (1 - (1 / (1 + r)^nper)) / (1 + g) * (1 + rate)^(1 - t)
return(PV)
}
pv <- function(rate, g = 0, nper, pmt, t = 1) {
# if (t = 1) {
pv <- get_pv_gpmt (rate, growth = g, t = nper) * pmt
#   } (t = 0) {
# pv <- get_pv_gpmt (rate, growth = g, t = nper) * pmt
#   }
return(PV)
}
rate <- 0.05
g <- 0.03
nper <- 5
pmt <- 100
pv_reason(rate, g, nper, pmt)
pv(rate, g, nper, pmt)
pv <- function(rate, g = 0, nper, pmt, t = 1) {
# if (t = 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt
#   } (t = 0) {
# pv <- get_pv_gpmt (rate, growth = g, t = nper) * pmt
#   }
}
rate <- 0.05
g <- 0.03
nper <- 5
pmt <- 100
pv_reason(rate, g, nper, pmt)
pv(rate, g, nper, pmt)
####roll_pv#####
roll_pv_reason <- function(rate, g = 0, nper, pmt_vec, t = 1) {
pv_vec <- double(length(pmt_vec))
for (i in 1:length(pv_vec)) {
if (i == 1) {
pv_vec[i] <- pv(rate, g, nper, pmt_vec[2], t)
} else {
pv_vec[i] <- pv_vec[i-1] * (1 + rate) - pmt_vec[i] * (1 + rate)^(1 - t)
}
}
return(pv_vec)
}
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t = 1) {
rate <- 0.05
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t = 1) {
rate <- 0.05
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t = 1) {
rate <- 0.05
g <- 0.03
nper <- 5
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t == 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt
} else (t == 0) {
rate <- 0.05
g <- 0.03
nper <- 5
pmt <- 100
pv_reason(rate, g, nper, pmt)
pv(rate, g, nper, pmt)
pv_reason(rate, g, nper, pmt, 0)
pv(rate, g, nper, pmt, 0)
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t == 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt
} else (t == 0) {
rate <- 0.05
g <- 0.03
nper <- 5
pmt <- 100
pv_reason(rate, g, nper, pmt)
pv(rate, g, nper, pmt)
pv_reason(rate, g, nper, pmt, 0)
pv(rate, g, nper, pmt, 0)
####pv#####
pv_reason <- function(rate, g = 0, nper, pmt, t = 1) {
r <- (1 + rate)/(1 + g) - 1
PV <- pmt/r * (1 - (1 / (1 + r)^nper)) / (1 + g) * (1 + rate)^(1 - t)
return(PV)
}
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t == 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt
} else (t == 0) {
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t == 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt
} else (t == 0) {
####pv#####
pv_reason <- function(rate, g = 0, nper, pmt, t = 1) {
r <- (1 + rate)/(1 + g) - 1
PV <- pmt/r * (1 - (1 / (1 + r)^nper)) / (1 + g) * (1 + rate)^(1 - t)
return(PV)
}
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t == 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt
} else (t == 0) {
pv <- function(rate, g = 0, nper, pmt, t = 1) {
if (t == 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt
} else (t == 0) {
rate <- 0.05
pv <- function(rate, g = 0, nper, pmt, t = 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt * (1 + rate)^(1 - t)
}
rate <- 0.05
g <- 0.03
nper <- 5
pmt <- 100
pv_reason(rate, g, nper, pmt)
pv(rate, g, nper, pmt)
pv_reason(rate, g, nper, pmt, 0)
pv(rate, g, nper, pmt, 0)
####roll_pv#####
roll_pv_reason <- function(rate, g = 0, nper, pmt_vec, t = 1) {
pv_vec <- double(length(pmt_vec))
for (i in 1:length(pv_vec)) {
if (i == 1) {
pv_vec[i] <- pv(rate, g, nper, pmt_vec[2], t)
} else {
pv_vec[i] <- pv_vec[i-1] * (1 + rate) - pmt_vec[i] * (1 + rate)^(1 - t)
}
}
return(pv_vec)
}
####pv#####
pv_reason <- function(rate, g = 0, nper, pmt, t = 1) {
r <- (1 + rate)/(1 + g) - 1
PV <- pmt/r * (1 - (1 / (1 + r)^nper)) / (1 + g) * (1 + rate)^(1 - t)
return(PV)
}
pv <- function(rate, g = 0, nper, pmt, t = 1) {
get_pv_gpmt (rate, growth = g, t = nper) * pmt * (1 + rate)^(1 - t)
}
rate <- 0.05
g <- 0.03
nper <- 5
pmt <- 100
pv_reason(rate, g, nper, pmt)
pv(rate, g, nper, pmt)
pv_reason(rate, g, nper, pmt, 0)
pv(rate, g, nper, pmt, 0)
####roll_pv#####
roll_pv_reason <- function(rate, g = 0, nper, pmt_vec, t = 1) {
pv_vec <- double(length(pmt_vec))
for (i in 1:length(pv_vec)) {
if (i == 1) {
pv_vec[i] <- pv(rate, g, nper, pmt_vec[2], t)
} else {
pv_vec[i] <- pv_vec[i-1] * (1 + rate) - pmt_vec[i] * (1 + rate)^(1 - t)
}
}
return(pv_vec)
}
microbenchmark(pv_reason(rate, g, nper, pmt),
pv(rate, g, nper, pmt),
pv_reason(rate, g, nper, pmt, 0),
pv(rate, g, nper, pmt, 0),
times=1000)
####roll_pv#####
roll_pv_reason <- function(rate, g = 0, nper, pmt_vec, t = 1) {
pv_vec <- double(length(pmt_vec))
for (i in 1:length(pv_vec)) {
if (i == 1) {
pv_vec[i] <- pv(rate, g, nper, pmt_vec[2], t)
} else {
pv_vec[i] <- pv_vec[i-1] * (1 + rate) - pmt_vec[i] * (1 + rate)^(1 - t)
}
}
return(pv_vec)
}
roll_pv <- function(rate, g = 0, nper, pmt_vec, t = 1) {
pv_vec <- double(length(pmt_vec))
for (i in 1:length(pv_vec)) {
if (i == 1) {
pv_vec[i] <- pv(rate, g, nper, pmt_vec[2], t)
} else {
pv_vec[i] <- pv(rate, g, nper-i, pmt_vec[2], t)
}
}
return(pv_vec)
}
rate <-0.05
g <- 0.03
nper <- 5
pmt_vec <- c(100, 102, 103, 105, 109)
roll_pv(rate, g, nper, pmt_vec)
roll_pv_reason(rate, g, nper, pmt_vec)
####roll_pv#####
roll_pv_reason <- function(rate, g = 0, nper, pmt_vec, t = 1) {
pv_vec <- double(length(pmt_vec))
for (i in 1:length(pv_vec)) {
if (i == 1) {
pv_vec[i] <- pv(rate, g, nper, pmt_vec[2], t)
} else {
pv_vec[i] <- pv_vec[i-1] * (1 + rate) - pmt_vec[i] * (1 + rate)^(1 - t)
}
}
return(pv_vec)
}
roll_pv <- function(rate, g = 0, nper, pmt_vec, t = 1) {
pv_vec <- double(length(pmt_vec))
for (i in 1:length(pv_vec)) {
pv_vec[i] <- pv(rate, g, nper-i, pmt_vec[2], t)
}
}
return(pv_vec)
}
roll_pv <- function(rate, g = 0, nper, pmt_vec, t = 1) {
pv_vec <- double(length(pmt_vec))
for (i in 1:length(pv_vec)) {
pv_vec[i] <- pv(rate, g, nper-i, pmt_vec[2], t)
}
return(pv_vec)
}
rate <-0.05
g <- 0.03
nper <- 5
pmt_vec <- c(100, 102, 103, 105, 109)
roll_pv(rate, g, nper, pmt_vec)
roll_pv_reason(rate, g, nper, pmt_vec)
roll_pv_reason(rate, g, nper, pmt_vec)
microbenchmark(pv_reason(rate, g, nper, pmt),
pv(rate, g, nper, pmt),
pv_reason(rate, g, nper, pmt, 0),
pv(rate, g, nper, pmt, 0),
times=1000)
check()
test()
rm(list = c("pv", "roll_pv"))
test()
get_pvfs_reason <- function(remaining_prob_vec, interest_vec, sal_vec) {
PVFS <- double(length = length(sal_vec))
for (i in 1:length(sal_vec)) {
remaining_prob_og <- remaining_prob_vec[i:length(remaining_prob_vec)]
remaining_prob <- remaining_prob_og / remaining_prob_og[1]
interest <- interest_vec[i]
sal <- sal_vec[i:length(sal_vec)]
sal_adjusted <- sal * remaining_prob
PVFS[i] <- npv(interest, sal_adjusted)
}
return(PVFS)
}
get_pvfs <- function(remaining_prob_vec, interest_vec, sal_vec) {
N <- length(sal_vec)
PVFS <- double(length = N)
for (i in 1:N) {
remaining_prob_sub <- remaining_prob_vec[i:N] / remaining_prob_vec[i]
interest <- interest_vec[i]
sal_sub <- sal_vec[i:N]
df_sub  <- (1 + interest)^(-(1:length(sal_sub)))  # Discount factors in each year based on the interest rate used in t
PVFS[i] <- sum(sal_sub * remaining_prob_sub * df_sub)
}
return(PVFS)
}
remaining_prob_vec <- c(0.95, 0.90, 0.85, 0.80, 0.90, 0.95, 0.90, 0.85, 0.80, 0.90)
interest_vec <- c(0.05, 0.04, 0.03, 0.04, 0.05, 0.05, 0.04, 0.03, 0.04, 0.05)
sal_vec <- c(100, 200, 320, 420, 540,100, 200, 320, 420, 540)
get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec)
get_pvfs(remaining_prob_vec, interest_vec, sal_vec)
microbenchmark(get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec),
get_pvfs(remaining_prob_vec, interest_vec, sal_vec),
times = 1000)
get_pvfb_reason <- function(sep_rate_vec, interest_vec, value_vec) {
PVFB <- double(length = length(value_vec))
for (i in 1:length(value_vec)) {
sep_rate <- sep_rate_vec[i:length(sep_rate_vec)]
#sep_prob in a given year is the probability that the member will survive all the previous years and get terminated exactly in the given year
sep_prob <- cumprod(1 - lag(sep_rate, n = 2, default = 0)) * lag(sep_rate, default = 0)
interest <- interest_vec[i]
value <- value_vec[i:length(value_vec)]
value_adjusted <- value * sep_prob
PVFB[i] <- npv(interest, value_adjusted[2:length(value_adjusted)])
}
return(PVFB)
}
get_pvfb <- function(sep_rate_vec, interest_vec, value_vec) {
N <- length(value_vec)
PVFB <- double(length = N)
for (i in 1:N) {
sep_rate <- sep_rate_vec[i:N]
sep_prob <- cumprod(1 - sep_rate) * sep_rate       # Probability of separating in each subsequent period
interest <- interest_vec[i]
if (i < N) {
value_sub <- value_vec[(i+1):N]                  # Payment in t+1 until the end of periods
sep_prob_sub <- sep_prob[-1]                     # Probability of remaining in the plan until the period t
df_sub <- (1 + interest)^(-(1:length(value_sub))) # Discount factors in each year based on the interest rate used in t
PVFB[i] <- sum(value_sub * sep_prob_sub * df_sub) # The product of probability, discount factor, future values (benefits) is PVFB
} else {
PVFB[i = N] <- 0                                 # At the last period, there are no future periods, so PVFB is 0
}
}
return(PVFB)
}
sep_rate_vec <- c(0.05, 0.06, 0.03, 0.04, 0.02, 0.05, 0.06, 0.08, 0.08, 0.09)
interest_vec <- c(0.05, 0.03, 0.04, 0.05, 0.04, 0.05, 0.04, 0.03, 0.03, 0.04)
value_vec <- c(100, 120, 130, 140, 150, 120, 150, 160, 200, 220)
get_pvfb_reason(sep_rate_vec, interest_vec, value_vec)
get_pvfb(sep_rate_vec, interest_vec, value_vec)
microbenchmark(get_pvfb_reason(sep_rate_vec, interest_vec, value_vec), get_pvfb(sep_rate_vec, interest_vec, value_vec), times = 1000)
get_pvfs_reason <- function(remaining_prob_vec, interest_vec, sal_vec) {
PVFS <- double(length = length(sal_vec))
for (i in 1:length(sal_vec)) {
remaining_prob_og <- remaining_prob_vec[i:length(remaining_prob_vec)]
remaining_prob <- remaining_prob_og / remaining_prob_og[1]
interest <- interest_vec[i]
sal <- sal_vec[i:length(sal_vec)]
sal_adjusted <- sal * remaining_prob
PVFS[i] <- npv(interest, sal_adjusted)
}
return(PVFS)
}
get_pvfs <- function(remaining_prob_vec, interest_vec, sal_vec) {
N <- length(sal_vec)
PVFS <- double(length = N)
for (i in 1:N) {
remaining_prob_sub <- remaining_prob_vec[i:N] / remaining_prob_vec[i]
interest <- interest_vec[i]
sal_sub <- sal_vec[i:N]
df_sub  <- (1 + interest)^(-(1:length(sal_sub)))  # Discount factors in each year based on the interest rate used in t
PVFS[i] <- sum(sal_sub * remaining_prob_sub * df_sub)
}
return(PVFS)
}
remaining_prob_vec <- c(0.95, 0.90, 0.85, 0.80, 0.90, 0.95, 0.90, 0.85, 0.80, 0.90)
interest_vec <- c(0.05, 0.04, 0.03, 0.04, 0.05, 0.05, 0.04, 0.03, 0.04, 0.05)
sal_vec <- c(100, 200, 320, 420, 540,100, 200, 320, 420, 540)
get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec)
get_pvfs(remaining_prob_vec, interest_vec, sal_vec)
microbenchmark(get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec),
get_pvfs(remaining_prob_vec, interest_vec, sal_vec),
times = 1000)
check()
test()
rm(list = c("get_pvfb", "get_pvfb_reason", "get_pvfs"))
load()
load_all()
test()
remaining_prob_vec <- c(0.95, 0.90, 0.85, 0.80, 0.90, 0.95, 0.90, 0.85, 0.80, 0.90)
interest_vec <- c(0.05, 0.04, 0.03, 0.04, 0.05, 0.05, 0.04, 0.03, 0.04, 0.05)
sal_vec <- c(100, 200, 320, 420, 540,100, 200, 320, 420, 540)
get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec)
get_pvfs(remaining_prob_vec, interest_vec, sal_vec)
microbenchmark(get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec),
get_pvfs(remaining_prob_vec, interest_vec, sal_vec),
times = 1000)
get_pmt0_reason <- function(r, nper, pv) {
if (r == 0) {
a <- pv/nper
} else {
a <- ifelse(nper == 0, 0, pv*r*(1+r)^(nper-1)/((1+r)^nper-1))
}
return(a)
}
remaining_prob_vec <- c(0.95, 0.90, 0.85, 0.80, 0.90, 0.95, 0.90, 0.85, 0.80, 0.90)
interest_vec <- c(0.05, 0.04, 0.03, 0.04, 0.05, 0.05, 0.04, 0.03, 0.04, 0.05)
sal_vec <- c(100, 200, 320, 420, 540,100, 200, 320, 420, 540)
get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec)
get_pvfs(remaining_prob_vec, interest_vec, sal_vec)
microbenchmark(get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec),
get_pvfs(remaining_prob_vec, interest_vec, sal_vec),
times = 1000)
remaining_prob_vec <- c(0.95, 0.90, 0.85, 0.80, 0.90, 0.95, 0.90, 0.85, 0.80, 0.90)
interest_vec <- c(0.05, 0.04, 0.03, 0.04, 0.05, 0.05, 0.04, 0.03, 0.04, 0.05)
sal_vec <- c(100, 200, 320, 420, 540,100, 200, 320, 420, 540)
get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec)
get_pvfs(remaining_prob_vec, interest_vec, sal_vec)
microbenchmark(get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec),
get_pvfs(remaining_prob_vec, interest_vec, sal_vec),
times = 1000)
get_pmt0_reason <- function(r, nper, pv) {
if (r == 0) {
a <- pv/nper
} else {
a <- ifelse(nper == 0, 0, pv*r*(1+r)^(nper-1)/((1+r)^nper-1))
}
return(a)
}
get_pvfs_reason <- function(remaining_prob_vec, interest_vec, sal_vec) {
PVFS <- double(length = length(sal_vec))
for (i in 1:length(sal_vec)) {
remaining_prob_og <- remaining_prob_vec[i:length(remaining_prob_vec)]
remaining_prob <- remaining_prob_og / remaining_prob_og[1]
interest <- interest_vec[i]
sal <- sal_vec[i:length(sal_vec)]
sal_adjusted <- sal * remaining_prob
PVFS[i] <- npv(interest, sal_adjusted)
}
return(PVFS)
}
get_pvfs <- function(remaining_prob_vec, interest_vec, sal_vec) {
N <- length(sal_vec)
PVFS <- double(length = N)
for (i in 1:N) {
remaining_prob_sub <- remaining_prob_vec[i:N] / remaining_prob_vec[i]
interest <- interest_vec[i]
sal_sub <- sal_vec[i:N]
df_sub  <- (1 + interest)^(-(1:length(sal_sub)))  # Discount factors in each year based on the interest rate used in t
PVFS[i] <- sum(sal_sub * remaining_prob_sub * df_sub)
}
return(PVFS)
}
remaining_prob_vec <- c(0.95, 0.90, 0.85, 0.80, 0.90, 0.95, 0.90, 0.85, 0.80, 0.90)
interest_vec <- c(0.05, 0.04, 0.03, 0.04, 0.05, 0.05, 0.04, 0.03, 0.04, 0.05)
sal_vec <- c(100, 200, 320, 420, 540,100, 200, 320, 420, 540)
get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec)
get_pvfs(remaining_prob_vec, interest_vec, sal_vec)
microbenchmark(get_pvfs_reason(remaining_prob_vec, interest_vec, sal_vec),
get_pvfs(remaining_prob_vec, interest_vec, sal_vec),
times = 1000)
get_pvfb_reason <- function(sep_rate_vec, interest_vec, value_vec) {
PVFB <- double(length = length(value_vec))
for (i in 1:length(value_vec)) {
sep_rate <- sep_rate_vec[i:length(sep_rate_vec)]
#sep_prob in a given year is the probability that the member will survive all the previous years and get terminated exactly in the given year
sep_prob <- cumprod(1 - lag(sep_rate, n = 2, default = 0)) * lag(sep_rate, default = 0)
interest <- interest_vec[i]
value <- value_vec[i:length(value_vec)]
value_adjusted <- value * sep_prob
PVFB[i] <- npv(interest, value_adjusted[2:length(value_adjusted)])
}
return(PVFB)
}
get_pvfb <- function(sep_rate_vec, interest_vec, value_vec) {
N <- length(value_vec)
PVFB <- double(length = N)
for (i in 1:N) {
sep_rate <- sep_rate_vec[i:N]
sep_prob <- cumprod(1 - sep_rate) * sep_rate       # Probability of separating in each subsequent period
interest <- interest_vec[i]
if (i < N) {
value_sub <- value_vec[(i+1):N]                  # Payment in t+1 until the end of periods
sep_prob_sub <- sep_prob[-1]                     # Probability of remaining in the plan until the period t
df_sub <- (1 + interest)^(-(1:length(value_sub))) # Discount factors in each year based on the interest rate used in t
PVFB[i] <- sum(value_sub * sep_prob_sub * df_sub) # The product of probability, discount factor, future values (benefits) is PVFB
} else {
PVFB[i = N] <- 0                                 # At the last period, there are no future periods, so PVFB is 0
}
}
return(PVFB)
}
sep_rate_vec <- c(0.05, 0.06, 0.03, 0.04, 0.02, 0.05, 0.06, 0.08, 0.08, 0.09)
interest_vec <- c(0.05, 0.03, 0.04, 0.05, 0.04, 0.05, 0.04, 0.03, 0.03, 0.04)
value_vec <- c(100, 120, 130, 140, 150, 120, 150, 160, 200, 220)
get_pvfb_reason(sep_rate_vec, interest_vec, value_vec)
get_pvfb(sep_rate_vec, interest_vec, value_vec)
microbenchmark(get_pvfb_reason(sep_rate_vec, interest_vec, value_vec), get_pvfb(sep_rate_vec, interest_vec, value_vec), times = 1000)
get_pvfb_reason <- function(sep_rate_vec, interest_vec, value_vec) {
PVFB <- double(length = length(value_vec))
for (i in 1:length(value_vec)) {
sep_rate <- sep_rate_vec[i:length(sep_rate_vec)]
#sep_prob in a given year is the probability that the member will survive all the previous years and get terminated exactly in the given year
sep_prob <- cumprod(1 - lag(sep_rate, n = 2, default = 0)) * lag(sep_rate, default = 0)
interest <- interest_vec[i]
value <- value_vec[i:length(value_vec)]
value_adjusted <- value * sep_prob
PVFB[i] <- npv(interest, value_adjusted[2:length(value_adjusted)])
}
return(PVFB)
}
get_pvfb <- function(sep_rate_vec, interest_vec, value_vec) {
N <- length(value_vec)
PVFB <- double(length = N)
for (i in 1:N) {
sep_rate <- sep_rate_vec[i:N]
sep_prob <- cumprod(1 - sep_rate) * sep_rate       # Probability of separating in each subsequent period
interest <- interest_vec[i]
if (i < N) {
value_sub <- value_vec[(i+1):N]                  # Payment in t+1 until the end of periods
sep_prob_sub <- sep_prob[-1]                     # Probability of remaining in the plan until the period t
df_sub <- (1 + interest)^(-(1:length(value_sub))) # Discount factors in each year based on the interest rate used in t
PVFB[i] <- sum(value_sub * sep_prob_sub * df_sub) # The product of probability, discount factor, future values (benefits) is PVFB
} else {
PVFB[i = N] <- 0                                 # At the last period, there are no future periods, so PVFB is 0
}
}
return(PVFB)
}
sep_rate_vec <- c(0.05, 0.06, 0.03, 0.04, 0.02, 0.05, 0.06, 0.08, 0.08, 0.09)
interest_vec <- c(0.05, 0.03, 0.04, 0.05, 0.04, 0.05, 0.04, 0.03, 0.03, 0.04)
value_vec <- c(100, 120, 130, 140, 150, 120, 150, 160, 200, 220)
get_pvfb_reason(sep_rate_vec, interest_vec, value_vec)
get_pvfb(sep_rate_vec, interest_vec, value_vec)
microbenchmark(get_pvfb_reason(sep_rate_vec, interest_vec, value_vec), get_pvfb(sep_rate_vec, interest_vec, value_vec), times = 1000)
text()
test()
load_all()
microbenchmark(get_pvfb_reason(sep_rate_vec, interest_vec, value_vec), get_pvfb(sep_rate_vec, interest_vec, value_vec), times = 1000)
library(pentools)
rm(list = c("get_pvfb", "get_pvfb_reason", "get_pvfs"))
library(pentools)
microbenchmark(get_pvfb_reason(sep_rate_vec, interest_vec, value_vec), get_pvfb(sep_rate_vec, interest_vec, value_vec), times = 1000)
data(package="pentools")
load(pentools)
library(pentools)
add_new_entrants
add_new_entrants
check()
library(devtools)
load()
check()
library(pentools)
